@page "/quizes/userquiz/{quizId:int}"
@attribute [Authorize]
@using BlzrQuiz.ServiceLayer
@using EF = BlzrQuiz.Data.Entities
@using System.Text
@using Microsoft.AspNetCore.Identity
@inject QuizService QService
@inject NavigationManager urihelper
@inject UserManager<IdentityUser> _UserManager
@inject AuthenticationStateProvider _Auth

<div class="container">
    @if (QuestionList.Count() == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-3">
                <h3>Question: @UQuestion.QuestionNumber</h3>
            </div>
            <div class="col-6"></div>
            <div style="vertical-align:top; margin-bottom: 10px;" class="col-3 align-content-right">
                <div class="btn-group align-top" role="group" aria-label="Basic example">
                    <button id="btn-previous" @onclick="PreviousQuestion" type="button" class="@BtnPreviousClasses">Previous</button>
                    <button id="btn-next" @onclick="NextQuestion" style="margin-left: 10px;" type="button" class="@BtnNextClasses">&nbsp;&nbsp;Next&nbsp;&nbsp;</button>
                    <button id="btn-submit" @onclick="Submit" style="margin-left: 10px;" type="button" class="@BtnSubmitClasses">&nbsp;Submit</button>
                </div>
            </div>
        </div>
        <div class="row col-12">
            @*Referencing Child Blazor Components: <ChildComponentName ChildComponent-Property="ThisComponent-Property></ChildComponentName>"*@
            <UserQuizQuestion ThisQuestion="UQuestion" ThisUserQuiz="ThisUserQuiz"></UserQuizQuestion>
        </div>
        <div id="results-div" style="margin-top: 15px;" class="@Alert">
            <strong>Score: </strong> @Score out of @QuestionList.Count()
        </div>

    }
</div>

@code {
    [Parameter] public int QuizId { get; set; }
    [Parameter] public int CertId { get; set; }
    private static readonly string Enabled = "btn btn-outline-secondary";
    private static readonly string Disabled = "btn btn-outline-secondary disabled";
    private static readonly string Invisible = " d-none";
    private static readonly string AlertBase = "alert alert-success";
    private string BtnPreviousClasses { get; set; } = Disabled;
    private string BtnNextClasses { get; set; } = Enabled;
    private string BtnSubmitClasses { get; set; } = Disabled + Invisible;
    private string Alert { get; set; } = AlertBase + Invisible;
    private int Score { get; set; } = 0;

    IEnumerable<EF.QuizQuestion> QuestionList { get; set; } = new List<EF.QuizQuestion>();
    int QLCount = 0;
    int counter = 0;
    public EF.QuizQuestion UQuestion { get; set; } = new EF.QuizQuestion();
    private EF.UserQuiz ThisUserQuiz { get; set; }
    public string UserName { get; set; } = "No One";
    protected override async Task OnInitializedAsync()
    {
        CertId = 3;
        try
        {
            await GetUserQuiz();
            QuestionList = ThisUserQuiz.Quiz.QuizQuestions;
            QLCount = QuestionList.Count() - 1;
            counter = 0;
            UQuestion = QuestionList.ElementAt(0);
            counter = 0;
            SetButtons();
        }
        catch (InvalidOperationException) { }
    }

    protected async Task GetUserQuiz()
    {
        var authState = await _Auth.GetAuthenticationStateAsync();
        var user = authState.User;
        UserName = user.Identity.Name ?? "Nada";
        ThisUserQuiz = await QService.GetUserQuizQuestions(QuizId, user.Identity.Name);

        if (ThisUserQuiz is null)
        {
            if (user.Identity.IsAuthenticated)
            {
                ThisUserQuiz = await QService.CreateUserQuiz(CertId, user.Identity.Name);
            }
            else
            {
                ThisUserQuiz = await QService.CreateUserQuiz(CertId, "Nada");
            }
        }

        if (ThisUserQuiz.UserQuizQuestionAnswers is null)
            ThisUserQuiz.UserQuizQuestionAnswers = new List<EF.UserQuizQuestionAnswer>();
    }

    async Task Submit()
    {
        var userAnswers = await QService.GetUserQuizAnswers(ThisUserQuiz.UserQuizId);
        userAnswers.OrderBy(x => x.QuizQuestion.QuestionNumber);
        QuestionList.OrderBy(x => x.QuestionNumber);
        var score = 0;
        for (var i = 0; i < QuestionList.Count(); i++)
        {
            var q = QuestionList.ElementAt(i);

            var n = q.Question.Answers.Where(a => a.IsCorrect).Select(x => x.AnswerId);
            var qAnswers = userAnswers.Where(x => x.QuizQuestion.QuestionNumber == q.QuestionNumber);
            foreach (var qa in qAnswers)
            {
                if (n.Contains(qa.AnswerId))
                    score++;
            }
        }
        Alert = AlertBase;
    }

    void NextQuestion()
    {
        if (QLCount > counter++)
        {
            UpdateDB();
        }
        else
        {
            --counter;
        }
        SetProperties();
        SetButtons();
    }

    void UpdateDB()
    {
        if (UQuestion.UserQuizQuestionAnswers is null)
            UQuestion.UserQuizQuestionAnswers = new List<EF.UserQuizQuestionAnswer>();

        QService.AddOrUpdateAnswersForUserQuiz(UQuestion, ThisUserQuiz.UserQuizId);
    }

    void PreviousQuestion()
    {
        if (counter-- > 0)
        {
            UpdateDB();
        }
        else
        {
            ++counter;
        }
        SetProperties();
        SetButtons();
    }

    void SetButtons()
    {
        if (counter > 0 && counter < QLCount)
        {
            if (counter == 1)
            {
                BtnPreviousClasses = Enabled;
            }
            else if (counter == QLCount - 1)
            {
                BtnNextClasses = Enabled;
                BtnSubmitClasses = Disabled + Invisible;
            }
        }
        else
        {
            if (counter == QLCount)
            {
                BtnNextClasses = Disabled + Invisible;
                BtnSubmitClasses = Enabled;
                BtnPreviousClasses = Enabled;
            }
            else if (counter == 0)
            {
                BtnPreviousClasses = Disabled;
                BtnNextClasses = Enabled;
            }
        }

    }

    void SetProperties()
    {
        UQuestion = QuestionList.ElementAt(counter);
    }
}