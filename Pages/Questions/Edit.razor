@page "/questions/{QuestionId:int}"
@attribute [Authorize]
@using BlzrQuiz.ServiceLayer
@using  BlzrQuiz.Data.Entities
@using System.Diagnostics
@inject QuizService QService
@inject NavigationManager NavManager;

<h1>Edit</h1>

<h4>Question</h4>
<hr />
<div class="container">
    <div class="row">
        <EditForm class="col-lg-12" Model="@Question" OnValidSubmit="@UpdateQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <label class="col-lg-1" for="classification">Text: </label>
                <InputTextArea id="name" class="col-lg-10" @bind-Value="@Question.Text" />
            </div>
            <div class="row">
                <div class="col-lg-10">
                </div>
                <div class="col-lg-2">
                    <button type="submit">Submit</button>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="row">
        @if (Question.QuestionTags != null)
        {
            foreach (var t in Question?.QuestionTags)
            {
                <div class="col-2"><button type="button" id="@t.Tag.Name" @onclick="@(() => Remove(t.TagId, t.QuestionId))" class="btn btn-lg btn-secondary btn-block h-100">@t.Tag.Name</button></div>
            }
        }
    </div>
    <div style="margin-top:5px;" class="row">
        @foreach (var t in CertTags)
        {
            <div class="col-2"><button type="button" id="@t.Tag.Name" @onclick="@(() => Add(t.TagId, Question.QuestionId))" class="btn btn-lg btn-info btn-block h-100">@t.Tag.Name</button></div>
        }
    </div>
</div>

<div>
    <a href="/questions/overview">Back</a>
</div>

@code {
    [Parameter]
    public int QuestionId { get; set; }
    private IEnumerable<Certification> Certifications { get; set; } = new List<Certification>();
    private Question Question { get; set; } = new Question();
    private ICollection<CertificationTag> CertTags { get; set; } = new List<CertificationTag>();

    protected override async Task OnInitializedAsync()
    {
        await PopulateQuestions();
        Certifications = await QService.GetCertifications();
        await PopulateCertTags();
    }

    async Task PopulateQuestions()
    {
        Question = await QService.GetQuestion(QuestionId);
        Question.QuestionTags = Question.QuestionTags.OrderBy(x => x.Tag.Name).ToList();
    }

    async Task PopulateCertTags()
    {
        var certs = await QService.GetCertificationTagsById(Question.CertificationId);
        CertTags = certs.OrderBy(x => x.Tag.Name).ToList();
    }

    void UpdateQuestion()
    {
        QService.UpdateQuestion(Question);
        NavManager.NavigateTo("/questions/overview");
    }

    async Task Add(int tagId, int questionId)
    {
        if (!Question.QuestionTags.Any(x => x.TagId == tagId && x.QuestionId == questionId))
        {
            await QService.AddQuestionTagAsync(tagId, questionId);
        }
    }

    async Task Remove(int tagId, int questionId)
    {
        await QService.RemoveQuestionTagAsync(Question.QuestionTags.First(x => x.TagId == tagId && x.QuestionId == questionId));
    }
}