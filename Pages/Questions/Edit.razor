@page "/questions/{QuestionId:int}"
@using BlzrQuiz.ServiceLayer
@using  BlzrQuiz.Data.Entities
@using System.Diagnostics
@inject QuizService QService
@inject NavigationManager Urihelper;

<h1>Edit</h1>

<h4>Question</h4>
<hr />
<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <EditForm Model="@Question" OnValidSubmit="@UpdateQuestion">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label class="col-lg-2" for="classification">Text: </label>
                <InputTextArea id="name" class="col-lg-10" @bind-Value="@Question.Text" />
                <button type="submit">Submit</button>
            </EditForm>
        </div>
    </div>
    <div class="row">
        @for (var i = 0; i < Question.QuestionTags.Count(); i++)
        {
            <div class="col-2"><button>@qt.Tag.Name</button></div>
        }
    </div>
    <div class="row">
        @foreach (var qt in Question.QuestionTags)
        {
            <div class="col-2"><button>@qt.Tag.Name</button></div>
        }
    </div>
    <div class="row">
        @foreach (var qt in Question.QuestionTags)
        {
            <div class="col-2"><button>@qt.Tag.Name</button></div>
        }
    </div>
</div>

<div>
    <a href="/questions/overview">Back</a>
</div>

@code {
    [Parameter]
    public int QuestionId { get; set; }
    private IEnumerable<Certification> Certifications { get; set; } = new List<Certification>();
    private Question Question { get; set; } = new Question();
    private IEnumerable<Tag> Tags { get; set; } = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        Question = await QService.GetQuestion(QuestionId);
        Certifications = await QService.GetCertifications();
        Tags = await QService.GetTags();
    }
    void UpdateQuestion()
    {
        QService.UpdateQuestion(Question);
        Urihelper.NavigateTo("/questions/overview");
    }
}