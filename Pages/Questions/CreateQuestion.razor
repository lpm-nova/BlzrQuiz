@using BlzrQuiz.Data.Entities
@using BlzrQuiz.ServiceLayer
@using BlzrQuiz.Core
@inject IModalService ModalService
@inject QuizService QService
@inject NavigationManager NavManager

@if (ShowForm)
{
    if (Certifications == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm class="col-12" Model="@Question" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <label for="cert-dropdown">Certification: &nbsp;</label>
                <InputSelectNumber id="cert-dropdown" @bind-Value="Question.CertificationId">
                    @foreach (var opt in Certifications)
                    {
                    <option value="@opt.CertificationId">@opt.Name</option>
                    }
                </InputSelectNumber>
                <br/>
                <InputTextArea id="name" class="col-10" @bind-Value="Question.Text" />
                <div class="form-group">
                    <AnswerBlock Answers="Answers"></AnswerBlock>
                </div>
            </div>
            <div class="row">
                <div class="col-10">
                </div>
                <div class="col-2">
                    <button type="submit">Submit</button>
                    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </EditForm>
    }
}
else
{
    <div class="alert alert-success" role="alert">
        Submitted<br />
        <button class="btn btn-primary" @onclick="Done">Done</button>
    </div>
}

@code {
    [CascadingParameter] ModalParameters Parameters { get; set; }
    [CascadingParameter] BlazoredModal BlazoredModal { get; set; }
    bool ShowForm { get; set; } = true;
    private Question Question { get; set; } = new Question();
    private List<Answer> Answers { get; set; } = new List<Answer>();
    private List<Certification> Certifications { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetCertifications();
        BlazoredModal.SetTitle("Create Question");
    }

    private async Task SetCertifications()
    {
        Certifications = await QService.GetCertificationsAsync() as List<Certification>;
        Certifications.Remove(Certifications.First(x => x.Name == "WOPR"));
    }

    void SubmitForm()
    {

        QService.AddQuestion(Question);
        ShowForm = false;
    }

    void Done()
    {
        ModalService.Close(ModalResult.Ok($"Question was created successfully."));
    }

    void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

}
