@page "/questions/index"
@attribute [Authorize]
@using BlzrQuiz.ServiceLayer
@using  BlzrQuiz.Data.Entities
@inject QuizService QService
@inject NavigationManager NavManager
@inject IModalService Modal

<style>
    #qtable tr td:nth-child(3) {
        width: 10%;
    }
</style>

<h3>Questions</h3>
@if (QuestionList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped" id="qtable">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Text</th>
                <th scope="col">Quiz</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in QuestionList)
            {
                <tr>
                    <th scope="row">@question.QuestionId</th>
                    <td>@question.Text</td>
                    <td>@question.Certification.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(e => NavManager.NavigateTo("/questions/"+question.QuestionId))">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
<button @onclick="@(() => Modal.Show<SimpleForm>("My Movies"))" class="btn btn-primary">View Movies</button>

@code {
    IEnumerable<Question> QuestionList;
    IEnumerable<Certification> Certifications;
    bool ModalIsVisible { get; set; } = false;
    public Question Question { get; set; } = new Question();

    protected override async Task OnInitializedAsync()
    {
        QuestionList = await QService.GetQuestions();
        Certifications = await QService.GetCertifications();
    }

    async Task AddNewQuestion()
    {
        QService.AddQuestion(Question);
        Question = new Question();
        QuestionList = await QService.GetQuestions();
    }

    async Task DeleteQuestion(Question entity)
    {
        QService.DeleteQuestion(entity);
        QuestionList = await QService.GetQuestions();
    }

    void ModalClosed(ModalResult modalResult)
    {
        if (modalResult.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Console.WriteLine(modalResult.Data);
        }

        Modal.OnClose -= ModalClosed;
    }
}