@page "/questions/overview"
@using BlzrQuiz.ServiceLayer
@using BlzrQuiz.Data.EfClasses
@inject QuizService QService
@inject IUriHelper urihelper;

<h3>Questions</h3>
@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Text</th>
                <th>Quiz</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in questions)
            {
                <tr>
                    <td>@question.QuestionId</td>
                    <td>@question.Text</td>
                    <td>@question.Certification.Name</td>
                    @*<td>
                        <button class="btn btn-primary" @onclick="@(e => urihelper.NavigateTo("/questions/"+question.QuestionId))">Edit</button>
                        <button class="btn btn-primary" @onclick="@(e=> DeleteQuestion(question))">Delete</button>
                    </td>*@
                </tr>
            }
        </tbody>
    </table>
}

<h3>Create</h3>

<h4>Question</h4>
<hr />
<div class="row">
    <div class="col-md-4">

        <EditForm Model="@question" OnValidSubmit="@AddNewQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="classification">Primary Classification: </label>
            <InputSelect T="int" id="certification" @bind-Value="@question.CertificationId">
                <option value="">Select Certification ...</option>
                @foreach (var certification in certifications)
                {
                    <option value="@certification.CertificationId">@certification.Name</option>
                }
            </InputSelect>
            <InputText id="name" @bind-Value="@question.Text" />

            <button type="submit">Submit</button>
        </EditForm>
    </div>
</div>




@code {
    IEnumerable<Question> questions;
    IEnumerable<Certification> certifications;
    private Question question { get; set; } = new Question();

    protected override async Task OnInitializedAsync()
    {
        questions = await QService.GetQuestions();
        certifications = await QService.GetCertifications();
    }

    async Task AddNewQuestion()
    {
        QService.AddQuestion(question);
        question = question.Reset();
        questions = await QService.GetQuestions();
    }

    async Task DeleteQuestion(Question entity)
    {
        QService.DeleteQuestion(entity);
        questions = await QService.GetQuestions();
    }
}

